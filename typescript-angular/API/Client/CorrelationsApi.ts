/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class CorrelationsApi {
        protected basePath = 'https://app.quantimo.do/api';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Get aggregated correlations
         * Get correlations based on the anonymized aggregate data from all QuantiModo users.
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param effect Variable name of the effect variable for which the user desires correlations
         * @param cause Variable name of the cause variable for which the user desires correlations
         * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
         * @param onsetDelay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
         * @param durationOfAction The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
         * @param updatedAt The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
         * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
         * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
         * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
         * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
         */
        public v1AggregatedCorrelationsGet (accessToken?: string, userId?: number, effect?: string, cause?: string, correlationCoefficient?: string, onsetDelay?: string, durationOfAction?: string, updatedAt?: string, limit?: number, offset?: number, sort?: number, outcomesOfInterest?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/aggregatedCorrelations';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (effect !== undefined) {
                queryParameters['effect'] = effect;
            }

            if (cause !== undefined) {
                queryParameters['cause'] = cause;
            }

            if (correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = correlationCoefficient;
            }

            if (onsetDelay !== undefined) {
                queryParameters['onsetDelay'] = onsetDelay;
            }

            if (durationOfAction !== undefined) {
                queryParameters['durationOfAction'] = durationOfAction;
            }

            if (updatedAt !== undefined) {
                queryParameters['updatedAt'] = updatedAt;
            }

            if (limit !== undefined) {
                queryParameters['limit'] = limit;
            }

            if (offset !== undefined) {
                queryParameters['offset'] = offset;
            }

            if (sort !== undefined) {
                queryParameters['sort'] = sort;
            }

            if (outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = outcomesOfInterest;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Store or Update a Correlation
         * Add correlation
         * @param body Provides correlation data
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         */
        public v1AggregatedCorrelationsPost (body: PostCorrelation, accessToken?: string, userId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/v1/aggregatedCorrelations';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling v1AggregatedCorrelationsPost.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get correlations
         * Get correlations based on data from a single user.
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param effect Variable name of the effect variable for which the user desires correlations
         * @param cause Variable name of the cause variable for which the user desires correlations
         * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
         * @param onsetDelay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
         * @param durationOfAction The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
         * @param updatedAt The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
         * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
         * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
         * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
         * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
         */
        public v1CorrelationsGet (accessToken?: string, userId?: number, effect?: string, cause?: string, correlationCoefficient?: string, onsetDelay?: string, durationOfAction?: string, updatedAt?: string, limit?: number, offset?: number, sort?: number, outcomesOfInterest?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/correlations';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (effect !== undefined) {
                queryParameters['effect'] = effect;
            }

            if (cause !== undefined) {
                queryParameters['cause'] = cause;
            }

            if (correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = correlationCoefficient;
            }

            if (onsetDelay !== undefined) {
                queryParameters['onsetDelay'] = onsetDelay;
            }

            if (durationOfAction !== undefined) {
                queryParameters['durationOfAction'] = durationOfAction;
            }

            if (updatedAt !== undefined) {
                queryParameters['updatedAt'] = updatedAt;
            }

            if (limit !== undefined) {
                queryParameters['limit'] = limit;
            }

            if (offset !== undefined) {
                queryParameters['offset'] = offset;
            }

            if (sort !== undefined) {
                queryParameters['sort'] = sort;
            }

            if (outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = outcomesOfInterest;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search user correlations for a given cause
         * Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
         * @param organizationId Organization ID
         * @param userId2 User id
         * @param variableName Effect variable name
         * @param organizationToken Organization access token
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
         */
        public v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet (organizationId: number, userId2: number, variableName: string, organizationToken: string, accessToken?: string, userId?: number, includePublic?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes'
                .replace('{' + 'organizationId' + '}', String(organizationId))
                .replace('{' + 'userId' + '}', String(userId2))
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'organizationId' is not null or undefined
            if (organizationId === null || organizationId === undefined) {
                throw new Error('Required parameter organizationId was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet.');
            }
            // verify required parameter 'userId2' is not null or undefined
            if (userId2 === null || userId2 === undefined) {
                throw new Error('Required parameter userId2 was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet.');
            }
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet.');
            }
            // verify required parameter 'organizationToken' is not null or undefined
            if (organizationToken === null || organizationToken === undefined) {
                throw new Error('Required parameter organizationToken was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (organizationToken !== undefined) {
                queryParameters['organization_token'] = organizationToken;
            }

            if (includePublic !== undefined) {
                queryParameters['includePublic'] = includePublic;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search user correlations for a given cause
         * Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
         * @param organizationId Organization ID
         * @param userId2 User id
         * @param variableName Cause variable name
         * @param organizationToken Organization access token
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
         */
        public v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet (organizationId: number, userId2: number, variableName: string, organizationToken: string, accessToken?: string, userId?: number, includePublic?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<CommonResponse>> {
            const localVarPath = this.basePath + '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects'
                .replace('{' + 'organizationId' + '}', String(organizationId))
                .replace('{' + 'userId' + '}', String(userId2))
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'organizationId' is not null or undefined
            if (organizationId === null || organizationId === undefined) {
                throw new Error('Required parameter organizationId was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet.');
            }
            // verify required parameter 'userId2' is not null or undefined
            if (userId2 === null || userId2 === undefined) {
                throw new Error('Required parameter userId2 was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet.');
            }
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet.');
            }
            // verify required parameter 'organizationToken' is not null or undefined
            if (organizationToken === null || organizationToken === undefined) {
                throw new Error('Required parameter organizationToken was null or undefined when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (organizationToken !== undefined) {
                queryParameters['organization_token'] = organizationToken;
            }

            if (includePublic !== undefined) {
                queryParameters['include_public'] = includePublic;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get average correlations for variables containing search term
         * Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
         * @param search Name of the variable that you want to know the causes or effects of.
         * @param effectOrCause Setting this to effect indicates that the searched variable is the effect and that the causes of this variable should be returned. cause indicates that the searched variable is the cause and the effects should be returned.
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
         */
        public v1PublicCorrelationsSearchSearchGet (search: string, effectOrCause: string, accessToken?: string, userId?: number, outcomesOfInterest?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/public/correlations/search/{search}'
                .replace('{' + 'search' + '}', String(search));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new Error('Required parameter search was null or undefined when calling v1PublicCorrelationsSearchSearchGet.');
            }
            // verify required parameter 'effectOrCause' is not null or undefined
            if (effectOrCause === null || effectOrCause === undefined) {
                throw new Error('Required parameter effectOrCause was null or undefined when calling v1PublicCorrelationsSearchSearchGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (effectOrCause !== undefined) {
                queryParameters['effectOrCause'] = effectOrCause;
            }

            if (outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = outcomesOfInterest;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search user correlations for a given effect
         * Returns average of all correlations and votes for all user cause variables for a given effect
         * @param variableName Effect variable name
         */
        public v1VariablesVariableNameCausesGet (variableName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/variables/{variableName}/causes'
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1VariablesVariableNameCausesGet.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search user correlations for a given cause
         * Returns average of all correlations and votes for all user effect variables for a given cause
         * @param variableName Cause variable name
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param correlationCoefficient You can use this to get effects with correlations greater than or less than 0
         */
        public v1VariablesVariableNameEffectsGet (variableName: string, accessToken?: string, userId?: number, correlationCoefficient?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/variables/{variableName}/effects'
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1VariablesVariableNameEffectsGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = correlationCoefficient;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search public correlations for a given effect
         * Returns average of all correlations and votes for all public cause variables for a given effect
         * @param variableName Effect variable name
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param correlationCoefficient You can use this to get causes with correlations greater than or less than 0
         */
        public v1VariablesVariableNamePublicCausesGet (variableName: string, accessToken?: string, userId?: number, correlationCoefficient?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/variables/{variableName}/public/causes'
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1VariablesVariableNamePublicCausesGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = correlationCoefficient;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Search public correlations for a given cause
         * Returns average of all correlations and votes for all public cause variables for a given cause
         * @param variableName Cause variable name
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         */
        public v1VariablesVariableNamePublicEffectsGet (variableName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Correlation>> {
            const localVarPath = this.basePath + '/v1/variables/{variableName}/public/effects'
                .replace('{' + 'variableName' + '}', String(variableName));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'variableName' is not null or undefined
            if (variableName === null || variableName === undefined) {
                throw new Error('Required parameter variableName was null or undefined when calling v1VariablesVariableNamePublicEffectsGet.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Delete vote
         * Delete previously posted vote
         * @param body The cause and effect variable names for the predictor vote to be deleted.
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         */
        public v1VotesDeletePost (body: VoteDelete, accessToken?: string, userId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<CommonResponse> {
            const localVarPath = this.basePath + '/v1/votes/delete';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling v1VotesDeletePost.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Post or update vote
         * This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
         * @param body Contains the cause variable, effect variable, and vote value.
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         */
        public v1VotesPost (body: PostVote, accessToken?: string, userId?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<CommonResponse> {
            const localVarPath = this.basePath + '/v1/votes';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling v1VotesPost.');
            }
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
