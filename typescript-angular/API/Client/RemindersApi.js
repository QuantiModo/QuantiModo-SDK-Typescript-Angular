/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.5
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference path="api.d.ts" />
/* tslint:disable:no-unused-variable member-ordering */
var API;
(function (API) {
    var Client;
    (function (Client) {
        'use strict';
        var RemindersApi = (function () {
            function RemindersApi($http, $httpParamSerializer, basePath) {
                this.$http = $http;
                this.$httpParamSerializer = $httpParamSerializer;
                this.basePath = 'https://app.quantimo.do/api';
                this.defaultHeaders = {};
                if (basePath !== undefined) {
                    this.basePath = basePath;
                }
            }
            RemindersApi.prototype.extendObj = function (objA, objB) {
                for (var key in objB) {
                    if (objB.hasOwnProperty(key)) {
                        objA[key] = objB[key];
                    }
                }
                return objA;
            };
            /**
             * Get specific pending tracking reminders
             * Specfic pending reminder instances that still need to be tracked.
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             * @param variableCategoryName Limit tracking reminder notifications to a specific variable category
             * @param createdAt When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
             * @param updatedAt When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
             * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
             * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
             * @param sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.
             */
            RemindersApi.prototype.v1TrackingReminderNotificationsGet = function (accessToken, userId, variableCategoryName, createdAt, updatedAt, limit, offset, sort, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminderNotifications';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                if (variableCategoryName !== undefined) {
                    queryParameters['variableCategoryName'] = variableCategoryName;
                }
                if (createdAt !== undefined) {
                    queryParameters['createdAt'] = createdAt;
                }
                if (updatedAt !== undefined) {
                    queryParameters['updatedAt'] = updatedAt;
                }
                if (limit !== undefined) {
                    queryParameters['limit'] = limit;
                }
                if (offset !== undefined) {
                    queryParameters['offset'] = offset;
                }
                if (sort !== undefined) {
                    queryParameters['sort'] = sort;
                }
                var httpRequestParams = {
                    method: 'GET',
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Skip a pending tracking reminder
             * Deletes the pending tracking reminder
             * @param body Id of the pending reminder to be skipped or deleted
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             */
            RemindersApi.prototype.v1TrackingReminderNotificationsSkipPost = function (body, accessToken, userId, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminderNotifications/skip';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new Error('Required parameter body was null or undefined when calling v1TrackingReminderNotificationsSkipPost.');
                }
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                var httpRequestParams = {
                    method: 'POST',
                    url: localVarPath,
                    json: true,
                    data: body,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Snooze a pending tracking reminder
             * Changes the reminder time to now plus one hour
             * @param body Id of the pending reminder to be snoozed
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             */
            RemindersApi.prototype.v1TrackingReminderNotificationsSnoozePost = function (body, accessToken, userId, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminderNotifications/snooze';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new Error('Required parameter body was null or undefined when calling v1TrackingReminderNotificationsSnoozePost.');
                }
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                var httpRequestParams = {
                    method: 'POST',
                    url: localVarPath,
                    json: true,
                    data: body,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Track a pending tracking reminder
             * Adds the default measurement for the pending tracking reminder with the reminder time as the measurment start time
             * @param body Id of the pending reminder to be tracked
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             */
            RemindersApi.prototype.v1TrackingReminderNotificationsTrackPost = function (body, accessToken, userId, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminderNotifications/track';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new Error('Required parameter body was null or undefined when calling v1TrackingReminderNotificationsTrackPost.');
                }
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                var httpRequestParams = {
                    method: 'POST',
                    url: localVarPath,
                    json: true,
                    data: body,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Delete tracking reminder
             * Delete previously created tracking reminder
             * @param body Id of reminder to be deleted
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             */
            RemindersApi.prototype.v1TrackingRemindersDeletePost = function (body, accessToken, userId, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminders/delete';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new Error('Required parameter body was null or undefined when calling v1TrackingRemindersDeletePost.');
                }
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                var httpRequestParams = {
                    method: 'POST',
                    url: localVarPath,
                    json: true,
                    data: body,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Get repeating tracking reminder settings
             * Users can be reminded to track certain variables at a specified frequency with a default value.
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             * @param variableCategoryName Limit tracking reminders to a specific variable category
             * @param createdAt When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
             * @param updatedAt When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
             * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
             * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
             * @param sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.
             */
            RemindersApi.prototype.v1TrackingRemindersGet = function (accessToken, userId, variableCategoryName, createdAt, updatedAt, limit, offset, sort, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminders';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                if (variableCategoryName !== undefined) {
                    queryParameters['variableCategoryName'] = variableCategoryName;
                }
                if (createdAt !== undefined) {
                    queryParameters['createdAt'] = createdAt;
                }
                if (updatedAt !== undefined) {
                    queryParameters['updatedAt'] = updatedAt;
                }
                if (limit !== undefined) {
                    queryParameters['limit'] = limit;
                }
                if (offset !== undefined) {
                    queryParameters['offset'] = offset;
                }
                if (sort !== undefined) {
                    queryParameters['sort'] = sort;
                }
                var httpRequestParams = {
                    method: 'GET',
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Store a Tracking Reminder
             * This is to enable users to create reminders to track a variable with a default value at a specified frequency
             * @param accessToken User&#39;s OAuth2 access token
             * @param userId User&#39;s id
             * @param body TrackingReminder that should be stored
             */
            RemindersApi.prototype.v1TrackingRemindersPost = function (accessToken, userId, body, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/trackingReminders';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                if (accessToken !== undefined) {
                    queryParameters['access_token'] = accessToken;
                }
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                var httpRequestParams = {
                    method: 'POST',
                    url: localVarPath,
                    json: true,
                    data: body,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            return RemindersApi;
        }());
        RemindersApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
        Client.RemindersApi = RemindersApi;
    })(Client = API.Client || (API.Client = {}));
})(API || (API = {}));
