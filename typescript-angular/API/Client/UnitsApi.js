/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.5
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference path="api.d.ts" />
/* tslint:disable:no-unused-variable member-ordering */
var API;
(function (API) {
    var Client;
    (function (Client) {
        'use strict';
        var UnitsApi = (function () {
            function UnitsApi($http, $httpParamSerializer, basePath) {
                this.$http = $http;
                this.$httpParamSerializer = $httpParamSerializer;
                this.basePath = 'https://app.quantimo.do/api';
                this.defaultHeaders = {};
                if (basePath !== undefined) {
                    this.basePath = basePath;
                }
            }
            UnitsApi.prototype.extendObj = function (objA, objB) {
                for (var key in objB) {
                    if (objB.hasOwnProperty(key)) {
                        objA[key] = objB[key];
                    }
                }
                return objA;
            };
            /**
             * Get unit categories
             * Get a list of the categories of measurement units such as &#39;Distance&#39;, &#39;Duration&#39;, &#39;Energy&#39;, &#39;Frequency&#39;, &#39;Miscellany&#39;, &#39;Pressure&#39;, &#39;Proportion&#39;, &#39;Rating&#39;, &#39;Temperature&#39;, &#39;Volume&#39;, and &#39;Weight&#39;.
             */
            UnitsApi.prototype.v1UnitCategoriesGet = function (extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/unitCategories';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                var httpRequestParams = {
                    method: 'GET',
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Get all available units
             * Get all available units
             * @param userId User&#39;s id
             * @param id Unit id
             * @param unitName Unit name
             * @param unitAbbreviatedName Restrict the results to a specific unit by providing the unit abbreviation.
             * @param unitCategoryName Restrict the results to a specific unit category by providing the unit category name.
             */
            UnitsApi.prototype.v1UnitsGet = function (userId, id, unitName, unitAbbreviatedName, unitCategoryName, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/units';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                if (id !== undefined) {
                    queryParameters['id'] = id;
                }
                if (unitName !== undefined) {
                    queryParameters['unitName'] = unitName;
                }
                if (unitAbbreviatedName !== undefined) {
                    queryParameters['unitAbbreviatedName'] = unitAbbreviatedName;
                }
                if (unitCategoryName !== undefined) {
                    queryParameters['unitCategoryName'] = unitCategoryName;
                }
                var httpRequestParams = {
                    method: 'GET',
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            /**
             * Units for Variable
             * Get a list of all possible units to use for a given variable
             * @param userId User&#39;s id
             * @param unitName Name of Unit you want to retrieve
             * @param unitAbbreviatedName Abbreviated Unit Name of the unit you want
             * @param unitCategoryName Name of the category you want units for
             * @param variable Name of the variable you want units for
             */
            UnitsApi.prototype.v1UnitsVariableGet = function (userId, unitName, unitAbbreviatedName, unitCategoryName, variable, extraHttpRequestParams) {
                var localVarPath = this.basePath + '/v1/unitsVariable';
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                if (userId !== undefined) {
                    queryParameters['userId'] = userId;
                }
                if (unitName !== undefined) {
                    queryParameters['unitName'] = unitName;
                }
                if (unitAbbreviatedName !== undefined) {
                    queryParameters['unitAbbreviatedName'] = unitAbbreviatedName;
                }
                if (unitCategoryName !== undefined) {
                    queryParameters['unitCategoryName'] = unitCategoryName;
                }
                if (variable !== undefined) {
                    queryParameters['variable'] = variable;
                }
                var httpRequestParams = {
                    method: 'GET',
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            return UnitsApi;
        }());
        UnitsApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
        Client.UnitsApi = UnitsApi;
    })(Client = API.Client || (API.Client = {}));
})(API || (API = {}));
