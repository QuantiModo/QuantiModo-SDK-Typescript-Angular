/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class UnitsApi {
        protected basePath = 'https://app.quantimo.do/api';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Get unit categories
         * Get a list of the categories of measurement units such as &#39;Distance&#39;, &#39;Duration&#39;, &#39;Energy&#39;, &#39;Frequency&#39;, &#39;Miscellany&#39;, &#39;Pressure&#39;, &#39;Proportion&#39;, &#39;Rating&#39;, &#39;Temperature&#39;, &#39;Volume&#39;, and &#39;Weight&#39;.
         */
        public v1UnitCategoriesGet (extraHttpRequestParams?: any ) : ng.IHttpPromise<UnitCategory> {
            const localVarPath = this.basePath + '/v1/unitCategories';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Get all available units
         * Get all available units
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param id Unit id
         * @param unitName Unit name
         * @param unitAbbreviatedName Restrict the results to a specific unit by providing the unit abbreviation.
         * @param unitCategoryName Restrict the results to a specific unit category by providing the unit category name.
         */
        public v1UnitsGet (accessToken?: string, userId?: number, id?: number, unitName?: string, unitAbbreviatedName?: string, unitCategoryName?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Unit>> {
            const localVarPath = this.basePath + '/v1/units';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (id !== undefined) {
                queryParameters['id'] = id;
            }

            if (unitName !== undefined) {
                queryParameters['unitName'] = unitName;
            }

            if (unitAbbreviatedName !== undefined) {
                queryParameters['unitAbbreviatedName'] = unitAbbreviatedName;
            }

            if (unitCategoryName !== undefined) {
                queryParameters['unitCategoryName'] = unitCategoryName;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Units for Variable
         * Get a list of all possible units to use for a given variable
         * @param accessToken User&#39;s OAuth2 access token
         * @param userId User&#39;s id
         * @param unitName Name of Unit you want to retrieve
         * @param unitAbbreviatedName Abbreviated Unit Name of the unit you want
         * @param unitCategoryName Name of the category you want units for
         * @param variable Name of the variable you want units for
         */
        public v1UnitsVariableGet (accessToken?: string, userId?: number, unitName?: string, unitAbbreviatedName?: string, unitCategoryName?: string, variable?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<Unit>> {
            const localVarPath = this.basePath + '/v1/unitsVariable';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (accessToken !== undefined) {
                queryParameters['access_token'] = accessToken;
            }

            if (userId !== undefined) {
                queryParameters['userId'] = userId;
            }

            if (unitName !== undefined) {
                queryParameters['unitName'] = unitName;
            }

            if (unitAbbreviatedName !== undefined) {
                queryParameters['unitAbbreviatedName'] = unitAbbreviatedName;
            }

            if (unitCategoryName !== undefined) {
                queryParameters['unitCategoryName'] = unitCategoryName;
            }

            if (variable !== undefined) {
                queryParameters['variable'] = variable;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
