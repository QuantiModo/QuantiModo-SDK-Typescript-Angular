/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { TrackingReminderNotificationAction } from './trackingReminderNotificationAction';
import { TrackingReminderNotificationTrackAllAction } from './trackingReminderNotificationTrackAllAction';
import { Unit } from './unit';


export interface TrackingReminderNotification {
    actionArray: Array<TrackingReminderNotificationAction>;
    availableUnits: Array<Unit>;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     */
    clientId?: string;
    /**
     * The way multiple measurements are aggregated over time
     */
    combinationOperation?: TrackingReminderNotification.CombinationOperationEnum;
    /**
     * Ex: 2017-07-29 20:49:54 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     */
    createdAt?: string;
    /**
     * Ex: Trader Joe's Bedtime Tea
     */
    displayName?: string;
    /**
     * Is the user specified default value or falls back to the last value in user unit. Good for initializing input fields
     */
    modifiedValue?: number;
    /**
     * Ex: /5
     */
    unitAbbreviatedName?: string;
    /**
     * Ex: 5
     */
    unitCategoryId?: number;
    /**
     * Ex: Rating
     */
    unitCategoryName?: string;
    /**
     * Ex: 10
     */
    unitId?: number;
    /**
     * Ex: 1 to 5 Rating
     */
    unitName?: string;
    /**
     * Default value to use for the measurement when tracking
     */
    defaultValue?: number;
    /**
     * Ex: positive
     */
    description?: string;
    /**
     * True if the reminders should be delivered via email
     */
    email?: boolean;
    /**
     * Ex: 0
     */
    fillingValue: number;
    /**
     * Ex: ion-sad-outline
     */
    iconIcon?: string;
    /**
     * id for the specific PENDING tracking remidner
     */
    id: number;
    /**
     * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     */
    imageUrl?: string;
    /**
     * Ex: happiestFaceIsFive
     */
    inputType?: string;
    /**
     * Ex: ion-happy-outline
     */
    ionIcon?: string;
    /**
     * Ex: 3
     */
    lastValue?: number;
    /**
     * Ex: 1
     */
    manualTracking?: boolean;
    /**
     * Ex: 5
     */
    maximumAllowedValue?: number;
    /**
     * Ex: 1
     */
    minimumAllowedValue?: number;
    /**
     * Ex: 3
     */
    mostCommonValue?: number;
    /**
     * True if the reminders should appear in the notification bar
     */
    notificationBar?: boolean;
    /**
     * Ex: UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     */
    notifiedAt?: string;
    /**
     * Ex: 5
     */
    numberOfUniqueValues?: number;
    /**
     * Indicates whether or not the variable is usually an outcome of interest such as a symptom or emotion
     */
    outcome?: boolean;
    /**
     * Ex: img/variable_categories/emotions.png
     */
    pngPath?: string;
    /**
     * Ex: https://quantimodo.quantimo.do/ionic/Modo/www/img/variable_categories/emotions.png
     */
    pngUrl?: string;
    /**
     * True if the reminders should appear as a popup notification
     */
    popUp?: boolean;
    /**
     * Link to associated product for purchase
     */
    productUrl?: string;
    /**
     * Ex: How is your overall mood?
     */
    question?: string;
    /**
     * Ex: 01-01-2018
     */
    reminderEndTime?: string;
    /**
     * How often user should be reminded in seconds. Ex: 86400
     */
    reminderFrequency?: number;
    /**
     * String identifier for the sound to accompany the reminder
     */
    reminderSound?: string;
    /**
     * Earliest time of day at which reminders should appear in UTC HH:MM:SS format
     */
    reminderStartTime?: string;
    /**
     * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
     */
    reminderTime?: string;
    /**
     * Ex: 4
     */
    secondMostCommonValue?: number;
    /**
     * Ex: 1
     */
    secondToLastValue?: number;
    /**
     * True if the reminders should be delivered via SMS
     */
    sms?: boolean;
    /**
     * Ex: https://quantimodo.quantimo.do/ionic/Modo/www/img/variable_categories/emotions.svg
     */
    svgUrl?: string;
    /**
     * Ex: 2
     */
    thirdMostCommonValue?: number;
    /**
     * Ex: 2
     */
    thirdToLastValue?: number;
    /**
     * Ex: Rate Overall Mood
     */
    title?: string;
    /**
     * Ex: 3
     */
    total?: number;
    trackAllActions: Array<TrackingReminderNotificationTrackAllAction>;
    /**
     * id for the repeating tracking remidner
     */
    trackingReminderId?: number;
    /**
     * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     */
    trackingReminderImageUrl?: string;
    /**
     * Ex: 5072482
     */
    trackingReminderNotificationId?: number;
    /**
     * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
     */
    trackingReminderNotificationTime?: string;
    /**
     * Ex: 1501534124
     */
    trackingReminderNotificationTimeEpoch?: number;
    /**
     * Ex: 15:48:44
     */
    trackingReminderNotificationTimeLocal?: string;
    /**
     * Ex: 8PM Sun, May 1
     */
    trackingReminderNotificationTimeLocalHumanString?: string;
    /**
     * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     */
    updatedAt?: string;
    /**
     * ID of User
     */
    userId?: number;
    /**
     * Ex: /5
     */
    userVariableUnitAbbreviatedName?: string;
    /**
     * Ex: 5
     */
    userVariableUnitCategoryId?: number;
    /**
     * Ex: Rating
     */
    userVariableUnitCategoryName?: string;
    /**
     * Ex: 10
     */
    userVariableUnitId?: number;
    /**
     * Ex: 1 to 5 Rating
     */
    userVariableUnitName?: string;
    /**
     * Ex: 1
     */
    userVariableVariableCategoryId?: number;
    /**
     * Ex: Emotions
     */
    userVariableVariableCategoryName?: string;
    /**
     * Ex: positive
     */
    valence?: string;
    /**
     * Ex: 1
     */
    variableCategoryId?: number;
    /**
     * Ex: https://maxcdn.icons8.com/Color/PNG/96/Cinema/theatre_mask-96.png
     */
    variableCategoryImageUrl?: string;
    /**
     * Name of the variable category to be used when sending measurements
     */
    variableCategoryName?: string;
    /**
     * Id for the variable to be tracked
     */
    variableId?: number;
    /**
     * Ex: https://image.png
     */
    variableImageUrl?: string;
    /**
     * Name of the variable to be used when sending measurements
     */
    variableName?: string;
}
export namespace TrackingReminderNotification {
    export type CombinationOperationEnum = 'MEAN' | 'SUM';
    export const CombinationOperationEnum = {
        MEAN: 'MEAN' as CombinationOperationEnum,
        SUM: 'SUM' as CombinationOperationEnum
    }
}
